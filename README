Устройство предназначено для измерения температур с помощью датчиков DS18B20, индикации на дисплее и обмена информацией с пользователем через GSM SMS-интерфейс

ветка avr-gcc-4.3.3 для компилятора версии 4.3.3
ветка avr-gcc-5.4.0 для компилятора версии 5.4.0+

Сборка через make:
1. в PATH должны быть указаны пути к <avr_toolchain>/bin, <avr_toolchain>/avr/lib, <avr_toolchain>/avr/include, <avr_toolchain>/<путь к make>
  -> если использовать WinAVR, то при полной установке, всё, что нужно, будет добавлено в PATH автоматически
  -> если использовать WinAVR без изменения PATH, то необходимо вручную добавить в неё пути к <WinAvr...\bin, <WinAvr...>\utils\bin
  -> для других toolchain вручную добавить пути к <toolchain>/bin, <toolchain>/avr/lib, <toolchain>/avr/include, <toolchain>/<путь к make>
  *** toolchain для Linux не включает make, в Linux есть свой make, из коробки, он уже прописан в PATH; если нет - установить через sudo apt-get install make
2. настроенный Makefile лежит в папке additions, скопировать его в каталог src
3. перейти в каталог src и оттуда выполнить make (для сборки) или make clean (для очистки результатов предыдущей сборки)
4. в корне проекта появится в т.ч. файл main.hex для загрузки в контроллер

Сборка через CMake:
 * в Linux при установке avr_toolchain через менеджер пакетов (sudo apt-get install gcc-avr binutils-avr avr-libc avrdude gdb-avr avarice simulavr make) сразу переходим к п.3
1. добавить системную переменную AVR_TOOLCHAIN_HOME=<путь к avr_toolchain>
2. добавить в PATH <путь к avr_toolchain>/<путь к каталогу с make(.exe)>
3. установить CMake
 * в Linux или через sudo apt-get install cmake, или скачать с сайта CMake собранный релиз и распаковать его где-то на своё усмотрение
 * в Windows или скачав установщик с сайта CMake, или скачать оттуда же собранный релиз и распаковать его где-то на своё усмотрение
 * можно дополнительно прописать в PATH путь к cmake(.exe), тогда в команде сборки можно будет не указывать полный путь к этому файлу
4. CMakeLists.txt и generic-gcc-avr.cmake лежат в корне проекта
5. из любого места в терминале выполнить: <путь к cmake>/cmake -DCMAKE_BUILD_TYPE=Release(или Debug) -G "CodeBlocks - Unix Makefiles" <путь к папке проекта>
6. в корне проекта появится Makefile
7. далее два варианта, не принципиально, какой выбрать:
  -> либо из корня проекта в терминале выполнить: make (для сборки) или make clean (для очистки результатов предыдущей сборки)
  -> либо из любого места в терминале выполнить: <путь к cmake>/cmake --build <путь к папке проекта> --target all -- -j 1
8. в обоих случаях в корне проекта появится в т.ч. файл GSM_Thermometer-atmega328p.hex для загрузки в контроллер

Примечания:
1. при указании путей не перепутать разделители (\ - для Windows, / - для Linux)
2. обеспечить в коде (в main) кодировку символов windows-1251, иначе русский текст на дисплее будет отображаться неверно (можно экспериментально подобрать другую)
3. при использовании WinAvr:
 - использовать только последнюю версию 20100110, предыдущие не поддерживают щадящую работу с EEPROM
 - при работе под Windows 10 нужно пропатчить WinAVR, иначе не работает, информация в папке /additions/WinAVR_patch
4. код из ветки avr-gcc-4.3.3 возможно будет компилироваться без ошибок для более поздних версий avr-gcc, но версия 5.4.0 точно выдаст ошибки - uint8_t во flash должны быть const

Описания устройства и проекта в целом - в папке additions (редактируемые документы и их .pdf или .jpg варианты):
- руководство пользователя - manual
- структура экранного меню пользователя - menu
- схема устройства - scheme
- алгоритм работы с gsm модемом - gsm_modem
- алгоритм обработки смс-сообщений - sms_analysis
- алгоритм работы главного цикла кода с периферией - main_brief
- заметка по алгоритму считывания кодов датчиков - 1_Wire_decoding_note
- этапы разработки - versions